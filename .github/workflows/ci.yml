name: Deploy to Ubuntu (Nginx + Gunicorn)

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  APP_DIR: ${{ secrets.APP_DIR }}
  PYTHON_VERSION: ${{ secrets.PYTHON_VERSION || '3.12' }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Warm server known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p "${{ secrets.SSH_PORT }}" "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts

      - name: Create app dir & python venv (first run safe)
        run: |
          ssh -p "${{ secrets.SSH_PORT }}" ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "mkdir -p $APP_DIR && python3 -m venv $APP_DIR/.venv || true"

      - name: Rsync source to server
        run: |
          rsync -az --delete \
            --exclude ".git" \
            --exclude ".github" \
            --exclude "__pycache__" \
            --exclude "venv" \
            --exclude ".venv" \
            ./ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:$APP_DIR/

      - name: Install dependencies on server
        run: |
          ssh -p "${{ secrets.SSH_PORT }}" ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "$APP_DIR/.venv/bin/pip install --upgrade pip && \
             $APP_DIR/.venv/bin/pip install -r $APP_DIR/requirements.txt"

      # Optional: run DB migrations, build assets, etc.
      # - name: Run Flask DB migrations
      #   run: |
      #     ssh -p "${{ secrets.SSH_PORT }}" ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
      #       "cd $APP_DIR && ./.venv/bin/flask db upgrade"

      - name: Fix permissions (socket & app)
        run: |
          ssh -p "${{ secrets.SSH_PORT }}" ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "sudo chown -R deploy:www-data /var/www/todaysforecast && sudo chmod -R g+rwX /var/www/todaysforecast"

      - name: Restart Gunicorn
        run: |
          ssh -p "${{ secrets.SSH_PORT }}" ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "sudo systemctl restart todaysforecast.service && sudo systemctl status todaysforecast.service --no-pager -l || true"

      - name: Health check (HTTP 200 expected)
        run: |
          # Adjust domain/path as needed
          curl -I --max-time 15 https://todaysforecast.co || curl -I --max-time 15 http://todaysforecast.co
